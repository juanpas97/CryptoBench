package com.example.juanperezdealgaba.sac;

import android.widget.TextView;

import org.spongycastle.crypto.InvalidCipherTextException;
import org.spongycastle.crypto.paddings.PKCS7Padding;

import java.io.FileWriter;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;

import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;

import shaded.org.apache.commons.codec.binary.Hex;


/**
 * Created by juanperezdealgaba on 25/2/18 based on the code of
 * http://www.mytechnotes.biz/2012/08/aes-256-symmetric-encryption-with.html
 *
 * In this class we implement the AESBouncyCastle function. The input will be
 * randomly generated by RandomStringGenerator(), then to byte[] converted and at the
 * end encrypted. The shown time is only the time of the encrypt() function.
 *
 * Then the process will be done backwards.
 */

public class AESBouncyCastleImplementation {

    /**
     *
     * @param randomString
     * @param writer
     * @throws NoSuchAlgorithmException
     * @throws InvalidCipherTextException
     * @throws IOException
     *
     * This class also uses a FileWriter to create the Report.
     */

    public void AES(String randomString, FileWriter writer, TextView results) throws
            NoSuchAlgorithmException, InvalidCipherTextException, IOException {

        KeyGenerator kg = KeyGenerator.getInstance("AES");
        kg.init(256);
        SecretKey sk = kg.generateKey();

        AESBouncyCastle abc = new AESBouncyCastle();
        abc.setPadding(new PKCS7Padding());
        abc.setKey(sk.getEncoded());

        System.out.println("**********AES/EBC************");
        results.append("**********AES/EBC*************\n");
        writer.write("\n**********AES/EBC***************\n");
        System.out.println("Plaintext[" + randomString.length() + "]: " + randomString);
        byte[] ba = randomString.getBytes("UTF-8");

        long startTimeEncrypt = System.nanoTime();
        byte[] encr = abc.encrypt(ba);
        long endTimeEncrypt = System.nanoTime();
        long durationEncrypt = (endTimeEncrypt - startTimeEncrypt);
        writer.write("Time to encrypt:" + durationEncrypt+ "ms\n");
        results.append("Time to encrypt:" + durationEncrypt+ "ms\n");

        System.out.println("Encrypted[" + encr.length + "]: " + Hex.encodeHexString(encr));

        System.out.println("Time to encrypt:" + durationEncrypt + "ms");

        long startTimeDecrypt = System.nanoTime();
        byte[] retr = abc.decrypt(encr);
        long endTimeDecrypt = System.nanoTime();
        long durationDecrypt = (endTimeDecrypt - startTimeDecrypt);
        writer.write("Time to decrypt:" + durationDecrypt + "ms\n");
        results.append("Time to decrypt:" + durationDecrypt + "ms\n");


        if (retr.length == ba.length) {
            ba = retr;
        } else {
            System.arraycopy(retr, 0, ba, 0, ba.length);
        }

        String decrypted = new String(ba, "UTF-8");
        System.out.println("Decrypted[" + decrypted.length() + "]: " + decrypted);
        System.out.println("Time to decrypt:" + durationDecrypt + "ms");
        System.out.println("********************************");
        writer.write("********************************");
        results.append("*********************************");
    }

    /**
     *
     * @param randomString
     * @throws NoSuchAlgorithmException
     * @throws InvalidCipherTextException
     * @throws UnsupportedEncodingException
     *
     * This class doesnÂ´t use a writer to ease quick tests.
     */
    public void AES(String randomString) throws NoSuchAlgorithmException,
            InvalidCipherTextException, UnsupportedEncodingException {

        KeyGenerator kg = KeyGenerator.getInstance("AES");
        kg.init(256);
        SecretKey sk = kg.generateKey();

        AESBouncyCastle abc = new AESBouncyCastle();
        abc.setPadding(new PKCS7Padding());
        abc.setKey(sk.getEncoded());

        System.out.println("**********AES/EBC************");
        System.out.println("Plaintext[" + randomString.length() + "]: " + randomString);
        byte[] ba = randomString.getBytes("UTF-8");

        long startTimeEncrypt = System.nanoTime();
        byte[] encr = abc.encrypt(ba);
        long endTimeEncrypt = System.nanoTime();
        long durationEncrypt = (endTimeEncrypt - startTimeEncrypt);


        System.out.println("Encrypted[" + encr.length + "]: " + Hex.encodeHexString(encr));

        System.out.println("Time to encrypt:" + durationEncrypt + "ms");

        long startTimeDecrypt = System.nanoTime();
        byte[] retr = abc.decrypt(encr);
        long endTimeDecrypt = System.nanoTime();
        long durationDecrypt = (endTimeDecrypt - startTimeDecrypt);


        if (retr.length == ba.length) {
            ba = retr;
        } else {
            System.arraycopy(retr, 0, ba, 0, ba.length);
        }

        String decrypted = new String(ba, "UTF-8");
        System.out.println("Decrypted[" + decrypted.length() + "]: " + decrypted);
        System.out.println("Time to decrypt:" + durationDecrypt + "ms");
        System.out.println("********************************");
    }

}
