/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>

#include <android/log.h>
#include <stdio.h>
#include <wolfssl/wolfcrypt/rsa.h>
#include <wolfssl/wolfcrypt/error-crypt.h>
#include <wolfssl/options.h>
#include <wolfssl/wolfcrypt/logging.h>
#include <wolfssl/wolfcrypt/md5.h>
#include <wolfssl/wolfcrypt/dh.h>
#include <wolfssl/wolfcrypt/aes.h>
/* Header for class com_wolfssl_wolfcrypt_RSA */


#define HEAP_HINT NULL


static int devId = INVALID_DEVID;


#define BITS_TO_BYTES(b)                (b/8)
#define MIN_OAEP_PADDING                (2*BITS_TO_BYTES(160)+2)

#define RSA_LENGTH                      (BITS_TO_BYTES(2048))

#define RSA_OAEP_DECRYPTED_DATA_LENGTH  (RSA_LENGTH-MIN_OAEP_PADDING)
#define RSA_OAEP_ENCRYPTED_DATA_LENGTH  (RSA_LENGTH)

#define MD5_DIGEST_SIZE WC_MD5_DIGEST_SIZE

enum {
    WC_MD5             =  0,      /* hash type unique */
    WC_MD5_BLOCK_SIZE  = 64,
    WC_MD5_DIGEST_SIZE = 16,
    WC_MD5_PAD_SIZE    = 56
};

#define  LOG_TAG    "WolfCrypt"

#define  LOGD(...)  __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG ,__VA_ARGS__)

#define IN_BUFFER_LENGTH                (RSA_OAEP_DECRYPTED_DATA_LENGTH)
#define PRIVATE_KEY_LENGTH              (1190)
#define PUBLIC_KEY_LENGTH               (294)

extern unsigned char private_key[PRIVATE_KEY_LENGTH];
extern unsigned char public_key[PUBLIC_KEY_LENGTH];

unsigned char in_buffer[IN_BUFFER_LENGTH];
unsigned char encrypted_buffer[RSA_LENGTH];
unsigned char decrypted_buffer[RSA_LENGTH];

#ifndef _Included_com_wolfssl_wolfcrypt_RSA
#define _Included_com_wolfssl_wolfcrypt_RSA
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_wolfssl_wolfcrypt_RSA
 * Method:    doSign
 * Signature: (Ljava/nio/ByteBuffer;JLjava/nio/ByteBuffer;[ILjava/nio/ByteBuffer;J)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_wolfcrypt_RSA_doSign
  (JNIEnv *, jobject, jobject, jlong, jobject, jintArray, jobject, jlong);

/*
 * Class:     com_wolfssl_wolfcrypt_RSA
 * Method:    doVerify
 * Signature: (Ljava/nio/ByteBuffer;JLjava/nio/ByteBuffer;JLjava/nio/ByteBuffer;J)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_wolfcrypt_RSA_doVerify
  (JNIEnv *, jobject, jobject, jlong, jobject, jlong, jobject, jlong);

/*
 * Class:     com_wolfssl_wolfcrypt_RSA
 * Method:    doEnc
 * Signature: (Ljava/nio/ByteBuffer;JLjava/nio/ByteBuffer;[ILjava/nio/ByteBuffer;J)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_wolfcrypt_RSA_doEnc
  (JNIEnv *, jobject, jobject, jlong, jobject, jintArray, jobject, jlong);

/*
 * Class:     com_wolfssl_wolfcrypt_RSA
 * Method:    doDec
 * Signature: (Ljava/nio/ByteBuffer;JLjava/nio/ByteBuffer;JLjava/nio/ByteBuffer;J)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_wolfcrypt_RSA_doDec
  (JNIEnv *, jobject, jobject, jlong, jobject, jlong, jobject, jlong);

JNIEXPORT void JNICALL
Java_com_wolfssl_wolfssljni_1ndk_1gradle_MainActivity_RSA(JNIEnv *env, jobject instance) {

    RsaKey key;
    RNG rng1;
    word32 index;
    int ret;

    int encrypted_len;
    int decrypted_len;


    // encrypt data.
    index = 0;
    ret = wc_InitRng(&rng1);
    if (ret != 0) { LOGD("Error at wc_InitRng: %i.", ret); return; }
    ret = wc_InitRsaKey(&key, NULL);
    if (ret != 0) { LOGD("Error at wc_InitRsaKey: %i.", ret); return; }
    ret = wc_RsaPublicKeyDecode((const byte*)public_key, &index, &key, PUBLIC_KEY_LENGTH);
    if (ret != 0) { LOGD("Error at wc_RsaPublicKeyDecode: %i.", ret); return; }
    ret = wc_RsaPublicEncrypt_ex((const byte *)in_buffer, IN_BUFFER_LENGTH, (byte*)encrypted_buffer, RSA_LENGTH, &key, &rng1, WC_RSA_OAEP_PAD, WC_HASH_TYPE_SHA, WC_MGF1SHA1, NULL, 0);
    if (ret < 0) { LOGD("Error at wc_RsaPublicEncrypt_ex: %i.", ret); return; }
    encrypted_len = ret;
    LOGD("%i",encrypted_len);



    // decrypt data.
    index = 0;
    ret = wc_InitRsaKey(&key, NULL);
    if (ret != 0) { LOGD("Error at wc_InitRsaKey: %i.", ret); return; }
    ret = wc_RsaPrivateKeyDecode((const byte*)private_key, &index, &key, PRIVATE_KEY_LENGTH);
    if (ret != 0) { LOGD("Error at wc_RsaPrivateKeyDecode: %i.", ret); return; }
    ret = wc_RsaPrivateDecrypt_ex((const byte *)encrypted_buffer, encrypted_len, (byte*)decrypted_buffer, RSA_LENGTH, &key, WC_RSA_OAEP_PAD, WC_HASH_TYPE_SHA, WC_MGF1SHA1, NULL, 0);
    if (ret < 0) { LOGD("Error at wc_RsaPrivateDecrypt_ex: %i.", ret); return; }
    decrypted_len = ret;
    wc_FreeRsaKey(&key);

    // compare data.
    if (decrypted_len != IN_BUFFER_LENGTH) { LOGD("Decrypted length should be %i but it is %i.", IN_BUFFER_LENGTH, decrypted_len); return; }
    for (int i = 0; i < IN_BUFFER_LENGTH; i++)
    {
        if (decrypted_buffer[i] != in_buffer[i]) { LOGD("Byte at index %i should be %i but it is %i.", i, 0xFF & in_buffer[i], 0xFF & decrypted_buffer[i]); return; }
    }

    // got here means no error.
    LOGD("All went O.K.");

}



JNIEXPORT void JNICALL
Java_com_wolfssl_wolfssljni_1ndk_1gradle_MainActivity_MD5(JNIEnv *env, jobject instance) {

    Md5 md5;
    byte *hash[MD5_DIGEST_SIZE];

    int ret;
    int final;

    int szdata= 32;
    byte data[szdata];
    word32 len = sizeof(data);
    ret = wc_InitMd5(&md5);

    RNG  rng;

    int rngint = wc_InitRng(&rng);
    if (rngint != 0) {
        LOGD("Failure Init"); //init of rng failed!
    }

    ret = wc_RNG_GenerateBlock(&rng, data,szdata);

    if (ret != 0) {
        LOGD("Failure GenerateByte"); //generating block failed!
    }

    int i = 0;
    for (int i = 0; i < 32; ++i) {
        LOGD("%x",data[i]);
    }


    printf("\n");

    if (ret != 0) {

        LOGD("wc_Initmd5 failed");

    } else {

        ret = wc_Md5Update(&md5, data, len);

        if (ret != 0) {

            /* Md5 Update Failure Case. */
            LOGD("Error in update");

        }

        final = wc_Md5Final(&md5, hash);
        if (final != 0) {

            /* Md5 Final Failure Case. */
            LOGD("Error in Md5Final");
        }
        LOGD("Hash finished");

    }


}

JNIEXPORT void JNICALL
Java_com_wolfssl_wolfssljni_1ndk_1gradle_MainActivity_DH(JNIEnv *env, jobject instance) {

    int ret;
    word32 bytes;
    word32 idx = 0, privSz, pubSz, privSz2, pubSz2, agreeSz, agreeSz2;
    byte tmp[1024];
    byte priv[256];
    byte pub[256];
    byte priv2[256];
    byte pub2[256];
    byte agree[256];
    byte agree2[256];
    DhKey key;
    DhKey key2;
    WC_RNG rng;


    //Prime number from https://tools.ietf.org/html/rfc3526#section-2

    byte p[256] = {0xFF,0xFF, 0xFF,0xFF,0xFF,0xFF, 0xC9, 0x0F, 0xDA, 0xA2, 0x21, 0x68, 0xC2, 0x34, 0xC4, 0xC6, 0x62, 0x8B, 0x80, 0xDC, 0x1C, 0xD1,
    0x29, 0x02, 0x4E, 0x08, 0x8A, 0x67, 0xCC, 0x74, 0x02, 0x0B, 0xBE, 0xA6, 0x3B, 0x13, 0x9B, 0x22, 0x51, 0x4A, 0x08, 0x79, 0x8E, 0x34, 0x04, 0xDD,
    0xEF, 0x95, 0x19, 0xB3, 0xCD, 0x3A, 0x43, 0x1B, 0x30, 0x2B, 0x0A, 0x6D, 0xF2, 0x5F, 0x14, 0x37, 0x4F, 0xE1, 0x35, 0x6D, 0x6D, 0x51, 0xC2, 0x45,
    0xE4, 0x85, 0xB5, 0x76, 0x62, 0x5E, 0x7E, 0xC6, 0xF4, 0x4C, 0x42, 0xE9, 0xA6, 0x37, 0xED, 0x6B, 0x0B, 0xFF, 0x5C, 0xB6, 0xF4, 0x06, 0xB7, 0xED,
    0xEE, 0x38, 0x6B, 0xFB, 0x5A, 0x89, 0x9F, 0xA5, 0xAE, 0x9F, 0x24, 0x11, 0x7C, 0x4B, 0x1F, 0xE6, 0x49, 0x28, 0x66, 0x51, 0xEC, 0xE4, 0x5B, 0x3D,
    0xC2, 0x00, 0x7C, 0xB8, 0xA1, 0x63, 0xBF, 0x05, 0x98, 0xDA, 0x48, 0x36, 0x1C, 0x55, 0xD3, 0x9A, 0x69, 0x16, 0x3F, 0xA8, 0xFD, 0x24, 0xCF, 0x5F,
    0x83, 0x65, 0x5D, 0x23, 0xDC, 0xA3, 0xAD, 0x96, 0x1C, 0x62, 0xF3, 0x56, 0x20, 0x85, 0x52, 0xBB, 0x9E, 0xD5, 0x29, 0x07, 0x70, 0x96, 0x96, 0x6D,
    0x67, 0x0C, 0x35, 0x4E, 0x4A, 0xBC, 0x98, 0x04, 0xF1, 0x74, 0x6C, 0x08, 0xCA, 0x18, 0x21, 0x7C, 0x32, 0x90, 0x5E, 0x46, 0x2E, 0x36, 0xCE, 0x3B,
    0xE3, 0x9E, 0x77, 0x2C, 0x18, 0x0E, 0x86, 0x03, 0x9B, 0x27, 0x83, 0xA2, 0xEC, 0x07, 0xA2, 0x8F, 0xB5, 0xC5, 0x5D, 0xF0, 0x6F, 0x4C, 0x52, 0xC9,
    0xDE, 0x2B, 0xCB, 0xF6, 0x95, 0x58, 0x17, 0x18, 0x39, 0x95, 0x49, 0x7C, 0xEA, 0x95, 0x6A, 0xE5, 0x15, 0xD2, 0x26, 0x18, 0x98, 0xFA, 0x05, 0x10,
    0x15, 0x72, 0x8E, 0x5A, 0x8A, 0xAC, 0xAA, 0x68,0x10, 0x24,  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

    int psize = sizeof(p);
    LOGD("Size of p is + [%i]",psize);


    byte g[] = {0, 2};


    (void) idx;
    (void) tmp;
    (void) bytes;
    for (int i = 0; i < 2; ++i) {

        int retrng = wc_InitRng(&rng);
        if (retrng != 0) {
            LOGD("Error at RNG"); //init of rng failed!
            return;
        }

        ret = wc_RNG_GenerateBlock(&rng, g, sizeof(g));
        if (ret != 0) {
            LOGD("Error generating block for key"); //generating block failed!
            return;
        }

        int sizeofg = sizeof(g);

        LOGD("The size of g is + [%i]",sizeofg);

        ret = wc_InitDhKey_ex(&key, HEAP_HINT, devId);
        if (ret != 0) {
            LOGD("Error at InitDHKey 1");
            return;
        }

        ret = wc_InitDhKey_ex(&key2, HEAP_HINT, devId);
        if (ret != 0) {
            LOGD("Error at InitDHKey 2");
            return;
        }


        ret = wc_DhSetKey(&key, p, sizeof(p), g, sizeof(g));
        if (ret != 0) {
            LOGD("Error setting key 1");
            return;
        }

        ret = wc_DhSetKey(&key2, p, sizeof(p), g, sizeof(g));
        if (ret != 0) {
            LOGD("Error setting key 2");
            return;
        }

        ret = wc_InitRng_ex(&rng, HEAP_HINT, devId);
        if (ret != 0) {
            LOGD("Error initialising RNG");
            return;
        }

        ret = wc_DhGenerateKeyPair(&key, &rng, priv, &privSz, pub, &pubSz);
        if (ret != 0) {
            LOGD("Error generating 1st keypair");
            return;
        }

        ret = wc_DhGenerateKeyPair(&key2, &rng, priv2, &privSz2, pub2, &pubSz2);
        if (ret != 0) {
            LOGD("Error generating 2nd keypair");
            return;
        }

        ret = wc_DhAgree(&key, agree, &agreeSz, priv, privSz, pub2, pubSz2);
        if (ret != 0) {
            LOGD("Error agreeing");
            return;
        } else {
            LOGD("Success at 1st agreeing");
        }

        ret = wc_DhAgree(&key2, agree2, &agreeSz2, priv2, privSz2, pub, pubSz);
        if(ret != 0){
            LOGD("Error at 2nd agreeing");
        } else{
            LOGD("Success at 2nd agreeing");
        }

        if (agreeSz != agreeSz2 || XMEMCMP(agree, agree2, agreeSz)) {
            LOGD("Error at 1st comparing");
        }
    }

}
JNIEXPORT void JNICALL
Java_com_wolfssl_wolfssljni_1ndk_1gradle_MainActivity_AES256(JNIEnv *env, jobject instance) {

    Aes enc;
    byte cipher[AES_BLOCK_SIZE];

    Aes dec;
    byte plain[AES_BLOCK_SIZE];

    int ret = 0;

    RNG  rng;

    int  szkey = 32;
    byte key[szkey];

    int  sziv = 16;
    byte iv[sziv];

    int szmsg = 16;
    byte msg[szmsg];

    int retrng = wc_InitRng(&rng);
    if (retrng != 0) {
        LOGD("Error at RNG"); //init of rng failed!
    }

    ret = wc_RNG_GenerateBlock(&rng, key, sizeof(key));
    if (ret != 0) {
        LOGD("Error generating block at key"); //generating block failed!
    }

    ret = wc_RNG_GenerateBlock(&rng, iv, sizeof(iv));
    if (ret != 0) {
        LOGD("Error generating block at iv"); //generating block failed!
    }

    ret = wc_RNG_GenerateBlock(&rng, msg, sizeof(msg));
    if (ret != 0) {
        LOGD("Error generating block at msg"); //generating block failed!
    }


    LOGD("Begin of key");

    for (int i = 0; i < 32 ; ++i) {
        LOGD("%x",key[i]);
    }

    LOGD("Begin of IV");

    for (int i = 0; i < 16 ; ++i) {
        LOGD("%x",iv[i]);
    }

    LOGD("Begin of msg");

    for (int i = 0; i < 16 ; ++i) {
        LOGD("%x",msg[i]);
    }

    if (wc_AesInit(&enc, HEAP_HINT, devId) != 0) {
        LOGD("Error in aes init enc");
        return;
    }else{
        LOGD("No problem at init enc");
    }

    if (wc_AesInit(&dec, HEAP_HINT, devId) != 0){
        LOGD("Error in aes init dec");
    return;
    }else{
    LOGD("No problem at init dec");
    }

    ret = wc_AesSetKey(&enc, key, (int) sizeof(key), iv, AES_ENCRYPTION);
    if (ret != 0){
        LOGD("Error in AesSetKey Enc");
    }else{
        LOGD("No problem at AesSetKey Enc");
    }

    ret = wc_AesSetKey(&dec, key, (int) sizeof(key), iv, AES_DECRYPTION);
    if (ret != 0){
    LOGD("Error in AesSetKey Dec");
}   else{
    LOGD("No problem at AesSetKey Dec ");
    }

    ret = wc_AesCbcEncrypt(&enc, cipher, msg, (int) sizeof(msg));
    if (ret != 0){
        LOGD("Error encrypting");
    }else{
        LOGD("Encryption finished");
    }

    ret = wc_AesCbcDecrypt(&dec, plain, cipher, (int) sizeof(cipher));
    if(ret != 0){
        LOGD("Error Decrypting");
    }else{
        LOGD("Decryption finished");
    }

    if (XMEMCMP(plain, msg, (int) sizeof(plain))) {
        LOGD("Error comparing XMEMCMP");
    }

    wc_AesFree(&enc);
    wc_AesFree(&dec);

    LOGD("Finished AES/CBC 256");
}

unsigned char private_key[PRIVATE_KEY_LENGTH] = {
            0x30, 0x82, 0x04, 0xa2, 0x02, 0x01, 0x00, 0x02,
            0x82, 0x01, 0x01, 0x00, 0xc8, 0x40, 0x6f, 0xc7,
            0xd0, 0xc9, 0xfb, 0xd2, 0x5c, 0xf3, 0xc5, 0xbc,
            0x77, 0x0e, 0x68, 0x5a, 0x87, 0x4a, 0xb9, 0x57,
            0x08, 0xd4, 0x6b, 0x3e, 0x9a, 0x89, 0x8a, 0x9f,
            0xdd, 0xad, 0x16, 0xa8, 0xa3, 0x82, 0x42, 0x22,
            0x5b, 0x69, 0x77, 0x28, 0xba, 0x15, 0x2b, 0xb3,
            0xf3, 0x24, 0xea, 0xe4, 0x86, 0x34, 0x73, 0xc1,
            0xe5, 0x2b, 0x0b, 0xdb, 0xcd, 0x54, 0x35, 0x55,
            0xda, 0xf1, 0xfd, 0x61, 0x3f, 0x1e, 0xe7, 0x1e,
            0xf1, 0xc0, 0x38, 0xcb, 0xfc, 0x0d, 0x9d, 0x65,
            0xba, 0x50, 0x1f, 0xb7, 0x8d, 0xb3, 0x59, 0x8c,
            0x48, 0xf2, 0x34, 0xf1, 0x46, 0x86, 0xab, 0xf2,
            0xc0, 0xdd, 0x1c, 0x6d, 0xbe, 0xf9, 0x8f, 0x79,
            0xa8, 0x6f, 0x02, 0x25, 0x07, 0xba, 0xc0, 0x91,
            0x27, 0x46, 0xfb, 0xc8, 0xe8, 0x78, 0xc0, 0xb4,
            0x91, 0xb6, 0xd6, 0x5d, 0xbe, 0x74, 0x00, 0x60,
            0x73, 0xe9, 0x0e, 0x10, 0x60, 0x48, 0x82, 0xbf,
            0x50, 0x58, 0xc4, 0x6f, 0xf0, 0x4e, 0xcf, 0x92,
            0x43, 0x36, 0x75, 0xe5, 0x79, 0xb9, 0x78, 0x81,
            0xbc, 0xb6, 0xf5, 0x74, 0xfe, 0x0f, 0x3f, 0xd4,
            0x88, 0xfb, 0xe6, 0x4f, 0xd8, 0x8a, 0x60, 0xc9,
            0x25, 0xed, 0xa1, 0xef, 0x4a, 0x57, 0x81, 0xb1,
            0xce, 0xaf, 0x3d, 0xcf, 0x2a, 0x44, 0x51, 0x76,
            0x16, 0x54, 0x3d, 0x4b, 0x77, 0x09, 0x39, 0x6c,
            0x85, 0xc5, 0x0c, 0x59, 0x49, 0x12, 0xba, 0x3f,
            0x98, 0x1f, 0x29, 0x16, 0xc6, 0xed, 0x08, 0x09,
            0xa9, 0xdc, 0xe4, 0x92, 0x70, 0x71, 0x57, 0x1c,
            0xcb, 0xf2, 0xfa, 0x03, 0x84, 0xf0, 0xd8, 0x27,
            0xbc, 0xa5, 0x0a, 0x95, 0x21, 0xbc, 0x87, 0x61,
            0x9a, 0xfd, 0x78, 0xab, 0xe3, 0x2f, 0xef, 0x16,
            0x86, 0x5b, 0xe7, 0x8e, 0x48, 0xef, 0x3c, 0xa1,
            0x6e, 0xd6, 0xe7, 0xda, 0x4c, 0x69, 0x5c, 0x4f,
            0x7a, 0x20, 0x58, 0x1d, 0x02, 0x03, 0x01, 0x00,
            0x01, 0x02, 0x82, 0x01, 0x00, 0x78, 0xd8, 0xda,
            0x1c, 0x5d, 0xd5, 0xe7, 0x10, 0x96, 0x63, 0xce,
            0x8a, 0xe3, 0xd6, 0x60, 0x07, 0x71, 0xea, 0x18,
            0x5b, 0x7b, 0xca, 0xa5, 0x45, 0xcc, 0x81, 0x00,
            0x95, 0x65, 0x73, 0xd5, 0x5e, 0xc3, 0xfe, 0x11,
            0xe7, 0x25, 0xff, 0x49, 0x97, 0xdc, 0x64, 0x76,
            0x51, 0x4c, 0x84, 0x94, 0xf4, 0x80, 0x41, 0x1b,
            0x32, 0x82, 0x18, 0x2e, 0x39, 0xe1, 0x79, 0xd6,
            0x0e, 0x0f, 0xe9, 0x45, 0x9d, 0xf0, 0x37, 0xb8,
            0x06, 0xa6, 0xa1, 0xf8, 0x24, 0xb1, 0xe1, 0x8d,
            0x81, 0x1c, 0xa4, 0xc9, 0xdf, 0x3d, 0xb6, 0x64,
            0x6e, 0x12, 0x7f, 0x88, 0x8f, 0xaa, 0x9e, 0x0f,
            0x1a, 0x9a, 0x65, 0x55, 0x88, 0xad, 0x5d, 0x71,
            0xc6, 0x5b, 0x6d, 0x52, 0x80, 0x02, 0x60, 0x23,
            0x61, 0xf5, 0xb0, 0x12, 0xb6, 0xb6, 0x04, 0x59,
            0x57, 0x1f, 0x30, 0x95, 0xc1, 0x50, 0xf4, 0x34,
            0x5e, 0x00, 0xd5, 0x3e, 0x54, 0x76, 0x5e, 0xd4,
            0x26, 0xf8, 0xa7, 0x93, 0xf8, 0xe9, 0x67, 0xcc,
            0xf9, 0x04, 0x8e, 0xcb, 0x3f, 0x5e, 0xde, 0x89,
            0xc5, 0x9b, 0x80, 0x88, 0xfc, 0xef, 0xc1, 0x30,
            0xc4, 0x69, 0xb4, 0xde, 0xfc, 0x2c, 0x29, 0x18,
            0x89, 0x8e, 0xca, 0x93, 0xfd, 0x4a, 0x2c, 0x2e,
            0x75, 0x7f, 0x61, 0xd6, 0xcb, 0xd0, 0x8a, 0xfe,
            0x79, 0xf6, 0x47, 0x47, 0x9a, 0x6d, 0xb7, 0x27,
            0xf0, 0x75, 0x9e, 0x26, 0xd3, 0xd0, 0x3e, 0x54,
            0x3c, 0x19, 0x94, 0xa7, 0x9a, 0x79, 0xb8, 0x8e,
            0x6f, 0xa6, 0x2a, 0xba, 0x84, 0x89, 0x04, 0xc3,
            0x92, 0x16, 0xd1, 0x21, 0x5b, 0x0b, 0x59, 0x00,
            0xe7, 0x98, 0x63, 0x21, 0x85, 0x36, 0x88, 0x9b,
            0x7d, 0x8f, 0x9b, 0x41, 0x20, 0x52, 0x79, 0x2d,
            0x33, 0xb6, 0x85, 0xd1, 0xf4, 0x2e, 0x86, 0x88,
            0x60, 0xa7, 0xda, 0xa1, 0x2b, 0x2f, 0x82, 0xe1,
            0x3e, 0xba, 0x49, 0x31, 0xc9, 0x02, 0x81, 0x81,
            0x00, 0xe3, 0x51, 0xb6, 0x11, 0xb7, 0x61, 0x34,
            0x60, 0x73, 0xe1, 0xa0, 0x92, 0x25, 0x96, 0x36,
            0x79, 0x89, 0xbc, 0x22, 0x28, 0xcb, 0xcd, 0x2f,
            0x51, 0x15, 0xa4, 0x44, 0xb8, 0x2f, 0xf4, 0xea,
            0x07, 0x5f, 0xf0, 0x54, 0x7e, 0x72, 0x5f, 0xe9,
            0xe1, 0xec, 0xa2, 0xc9, 0x34, 0x12, 0x30, 0xa7,
            0xe1, 0xd0, 0x63, 0xbe, 0x64, 0xcc, 0x97, 0x98,
            0xdc, 0xff, 0xbe, 0xd7, 0x24, 0xab, 0x7c, 0x27,
            0x3d, 0x4f, 0x76, 0x46, 0x10, 0xb2, 0x29, 0xc5,
            0x6e, 0xbe, 0x27, 0x40, 0xf0, 0xfe, 0x33, 0xbe,
            0x84, 0x98, 0xe0, 0x5a, 0x6c, 0x17, 0xbf, 0xa1,
            0x1d, 0x07, 0x52, 0xb0, 0x28, 0x3c, 0xa6, 0x51,
            0x39, 0xc3, 0xb7, 0xb5, 0x6b, 0xcf, 0x8a, 0xa1,
            0x99, 0x94, 0x4d, 0xe1, 0x76, 0x17, 0x09, 0x18,
            0xe8, 0x5e, 0x5f, 0xfa, 0x76, 0x18, 0x70, 0x77,
            0x6c, 0x04, 0x9c, 0x80, 0x48, 0x37, 0x7c, 0xfa,
            0x17, 0x02, 0x81, 0x81, 0x00, 0xe1, 0x84, 0x75,
            0xd3, 0xbe, 0x3b, 0xe6, 0x11, 0x71, 0xe2, 0x56,
            0xd4, 0x31, 0xb8, 0x04, 0x66, 0xc2, 0x29, 0xa2,
            0x14, 0x16, 0x81, 0xa2, 0xd7, 0x47, 0x20, 0x9a,
            0xd6, 0x2a, 0x98, 0x8e, 0x01, 0x61, 0x12, 0x41,
            0xb6, 0xd7, 0x34, 0x7a, 0xc8, 0x07, 0x34, 0xe4,
            0x2f, 0x4c, 0xb9, 0xe3, 0x72, 0xa8, 0x16, 0xed,
            0x36, 0xfb, 0x18, 0xd7, 0x87, 0xa2, 0xff, 0x6a,
            0xfe, 0xde, 0x37, 0x5d, 0x1a, 0x45, 0xb1, 0x16,
            0x0a, 0x2c, 0x35, 0xab, 0x6e, 0xc1, 0x12, 0xac,
            0x7d, 0xe3, 0x7a, 0xd9, 0xc1, 0xda, 0xaa, 0x36,
            0xdc, 0xc8, 0x03, 0x30, 0x39, 0x59, 0xe6, 0x85,
            0x4e, 0x6b, 0xd2, 0x2d, 0xbf, 0xb8, 0xb4, 0x45,
            0xb1, 0x6b, 0xf4, 0xcf, 0x41, 0x4d, 0xab, 0x5c,
            0x29, 0x81, 0x4b, 0x87, 0x57, 0xf1, 0x0a, 0x6e,
            0x2d, 0x40, 0x80, 0x31, 0xc3, 0x1b, 0xdc, 0xc0,
            0x78, 0x3a, 0x1b, 0x83, 0xeb, 0x02, 0x81, 0x80,
            0x78, 0x37, 0x87, 0x65, 0x39, 0x28, 0xf4, 0x0d,
            0x2a, 0x5b, 0xa1, 0x92, 0x88, 0xc4, 0x37, 0x0c,
            0xf1, 0x95, 0x88, 0x2f, 0x31, 0x10, 0xd3, 0x3c,
            0x3b, 0x88, 0xc3, 0x3a, 0xf1, 0x49, 0xc1, 0xd6,
            0xa2, 0x9b, 0x33, 0xe4, 0x27, 0x52, 0xa8, 0x1a,
            0xee, 0x0d, 0x6d, 0x00, 0xd7, 0xb9, 0xd9, 0x9f,
            0x27, 0x99, 0x08, 0x60, 0xc0, 0x7e, 0x4f, 0xbe,
            0x58, 0x96, 0x31, 0xab, 0x57, 0xf1, 0x71, 0xc3,
            0x0f, 0xda, 0x09, 0xd5, 0xdc, 0x93, 0x10, 0xb1,
            0xaf, 0x68, 0x8d, 0x04, 0xa6, 0x3a, 0xf1, 0x3f,
            0xa8, 0xa5, 0xc5, 0xcc, 0x32, 0x87, 0x0a, 0x8a,
            0x92, 0x8b, 0xdd, 0x53, 0x7a, 0x37, 0xae, 0xef,
            0x30, 0x9d, 0x60, 0x19, 0xa3, 0x09, 0xba, 0xca,
            0xc0, 0xce, 0xab, 0x34, 0xcb, 0x9b, 0xe9, 0x0b,
            0x42, 0x95, 0xd9, 0x9c, 0x48, 0xf2, 0x79, 0x85,
            0xab, 0xae, 0xa4, 0x7d, 0x0c, 0xb3, 0x50, 0x83,
            0x02, 0x81, 0x80, 0x35, 0xc9, 0x91, 0x0c, 0xca,
            0xaf, 0xa0, 0xa5, 0x02, 0x83, 0x98, 0x70, 0x0d,
            0xd7, 0xb4, 0xfd, 0x09, 0x4c, 0x42, 0xc3, 0x05,
            0xc7, 0x2f, 0x9e, 0xa6, 0xf1, 0x48, 0xdc, 0xd1,
            0xd6, 0x06, 0xf0, 0x9f, 0x45, 0x6a, 0x75, 0x00,
            0x89, 0x1c, 0xcb, 0xbe, 0xa4, 0x47, 0xd4, 0x5c,
            0x39, 0x6d, 0xdd, 0x37, 0xe8, 0x17, 0xf5, 0xe8,
            0x17, 0xb9, 0xb8, 0x39, 0x11, 0x30, 0x64, 0xcf,
            0x7d, 0x66, 0xf0, 0x50, 0x34, 0xf7, 0x6b, 0xbf,
            0xb5, 0xa1, 0x48, 0xce, 0x35, 0xf4, 0xfc, 0x25,
            0x98, 0x74, 0x7d, 0x7e, 0xf8, 0xe0, 0x12, 0xf2,
            0x85, 0x88, 0x27, 0xf5, 0xa0, 0x3c, 0xa5, 0x42,
            0xa4, 0x23, 0x93, 0x39, 0xab, 0x8d, 0x7f, 0xce,
            0x9e, 0xda, 0x1b, 0xda, 0x39, 0x87, 0xc6, 0xc2,
            0x76, 0xd0, 0x36, 0x12, 0x60, 0x89, 0x7c, 0xb3,
            0x88, 0x9f, 0xd5, 0xc8, 0x3c, 0x73, 0x8f, 0x79,
            0x54, 0x7c, 0xb7, 0x02, 0x81, 0x80, 0x20, 0x31,
            0x41, 0x4c, 0xa4, 0xc9, 0x99, 0xd1, 0x0c, 0x83,
            0x2b, 0x94, 0x30, 0x1c, 0x25, 0x92, 0x84, 0x2c,
            0x16, 0x0e, 0xcf, 0x2b, 0x3b, 0x7b, 0x92, 0x2b,
            0x5d, 0xae, 0x46, 0x82, 0xf1, 0x7f, 0xc1, 0x42,
            0x1b, 0x96, 0x12, 0x01, 0x1d, 0x62, 0x29, 0xe5,
            0x8d, 0x4c, 0xa8, 0xf4, 0x47, 0x02, 0x9a, 0x92,
            0x65, 0x27, 0xbd, 0x49, 0x12, 0xd2, 0xc6, 0xcc,
            0xc7, 0x2b, 0x18, 0x02, 0x90, 0x4a, 0xd6, 0x65,
            0x6f, 0x2a, 0x3c, 0x40, 0x68, 0xf5, 0x36, 0x70,
            0xd4, 0x52, 0x82, 0xae, 0xa8, 0xa2, 0x38, 0xc0,
            0x00, 0x13, 0x5f, 0x15, 0x45, 0x1a, 0x95, 0x17,
            0xc1, 0x62, 0x9e, 0xc8, 0xe3, 0xe2, 0xc4, 0xf7,
            0xbf, 0xaa, 0xef, 0xfb, 0x15, 0xde, 0xa8, 0xa9,
            0x64, 0x3e, 0x0e, 0x5a, 0xa0, 0x12, 0x7d, 0x0d,
            0x5b, 0xb1, 0xef, 0xf3, 0xaf, 0xed, 0x8f, 0x5b,
            0xd8, 0xb3, 0xbc, 0xa1, 0x35, 0xd1
    };

    unsigned char public_key[PUBLIC_KEY_LENGTH] = {
            0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09,
            0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,
            0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00,
            0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01,
            0x00, 0xc8, 0x40, 0x6f, 0xc7, 0xd0, 0xc9, 0xfb,
            0xd2, 0x5c, 0xf3, 0xc5, 0xbc, 0x77, 0x0e, 0x68,
            0x5a, 0x87, 0x4a, 0xb9, 0x57, 0x08, 0xd4, 0x6b,
            0x3e, 0x9a, 0x89, 0x8a, 0x9f, 0xdd, 0xad, 0x16,
            0xa8, 0xa3, 0x82, 0x42, 0x22, 0x5b, 0x69, 0x77,
            0x28, 0xba, 0x15, 0x2b, 0xb3, 0xf3, 0x24, 0xea,
            0xe4, 0x86, 0x34, 0x73, 0xc1, 0xe5, 0x2b, 0x0b,
            0xdb, 0xcd, 0x54, 0x35, 0x55, 0xda, 0xf1, 0xfd,
            0x61, 0x3f, 0x1e, 0xe7, 0x1e, 0xf1, 0xc0, 0x38,
            0xcb, 0xfc, 0x0d, 0x9d, 0x65, 0xba, 0x50, 0x1f,
            0xb7, 0x8d, 0xb3, 0x59, 0x8c, 0x48, 0xf2, 0x34,
            0xf1, 0x46, 0x86, 0xab, 0xf2, 0xc0, 0xdd, 0x1c,
            0x6d, 0xbe, 0xf9, 0x8f, 0x79, 0xa8, 0x6f, 0x02,
            0x25, 0x07, 0xba, 0xc0, 0x91, 0x27, 0x46, 0xfb,
            0xc8, 0xe8, 0x78, 0xc0, 0xb4, 0x91, 0xb6, 0xd6,
            0x5d, 0xbe, 0x74, 0x00, 0x60, 0x73, 0xe9, 0x0e,
            0x10, 0x60, 0x48, 0x82, 0xbf, 0x50, 0x58, 0xc4,
            0x6f, 0xf0, 0x4e, 0xcf, 0x92, 0x43, 0x36, 0x75,
            0xe5, 0x79, 0xb9, 0x78, 0x81, 0xbc, 0xb6, 0xf5,
            0x74, 0xfe, 0x0f, 0x3f, 0xd4, 0x88, 0xfb, 0xe6,
            0x4f, 0xd8, 0x8a, 0x60, 0xc9, 0x25, 0xed, 0xa1,
            0xef, 0x4a, 0x57, 0x81, 0xb1, 0xce, 0xaf, 0x3d,
            0xcf, 0x2a, 0x44, 0x51, 0x76, 0x16, 0x54, 0x3d,
            0x4b, 0x77, 0x09, 0x39, 0x6c, 0x85, 0xc5, 0x0c,
            0x59, 0x49, 0x12, 0xba, 0x3f, 0x98, 0x1f, 0x29,
            0x16, 0xc6, 0xed, 0x08, 0x09, 0xa9, 0xdc, 0xe4,
            0x92, 0x70, 0x71, 0x57, 0x1c, 0xcb, 0xf2, 0xfa,
            0x03, 0x84, 0xf0, 0xd8, 0x27, 0xbc, 0xa5, 0x0a,
            0x95, 0x21, 0xbc, 0x87, 0x61, 0x9a, 0xfd, 0x78,
            0xab, 0xe3, 0x2f, 0xef, 0x16, 0x86, 0x5b, 0xe7,
            0x8e, 0x48, 0xef, 0x3c, 0xa1, 0x6e, 0xd6, 0xe7,
            0xda, 0x4c, 0x69, 0x5c, 0x4f, 0x7a, 0x20, 0x58,
            0x1d, 0x02, 0x03, 0x01, 0x00, 0x01
    };




#ifdef __cplusplus
}
#endif
#endif
